# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

${moduleId}.core.enabled=true
${moduleId}.core.name=repositoryGrid
${moduleId}.core.login=repository
${moduleId}.core.password=repositoryGrid-dev
${moduleId}.core.local.id=
${moduleId}.core.local.host=
${moduleId}.core.public.host=
${moduleId}.core.public.time.port=
${moduleId}.core.local.time.port=47120
${moduleId}.core.local.time.portRange=0
${moduleId}.core.initialMembers=

${moduleId}.core.public.disco.port=
${moduleId}.core.local.disco.port=47110
${moduleId}.core.local.disco.portRange=0
# Ignite default is 0
${moduleId}.core.local.disco.joinTimeout=0
# Ignite default is 5000
${moduleId}.core.local.disco.ackTimeout=5000
# Ignite default is 5000
${moduleId}.core.local.disco.socketTimeout=5000
# Ignite default is 5000, we grant more time to complete operations (e.g. join)
${moduleId}.core.local.disco.networkTimeout=15000

${moduleId}.core.local.disco.registrationRefresh.cron=0 0 2 * * ?

${moduleId}.core.public.comm.port=
${moduleId}.core.local.comm.port=47100
${moduleId}.core.local.comm.portRange=0
# Ignite default is 0, set to 10000 to avoid OOME (and avoid one of the startup WARN messages)
${moduleId}.core.local.comm.messageQueueLimit=10000
# defaults are 5000 and 600000 (quite significant)
# this can cause long join/startup/rebalance scenarios, especially in NATed / Dockerised / Kubernetes environments with unreachable, internal addresses
${moduleId}.core.local.comm.connectTimeout=1000
${moduleId}.core.local.comm.maxConnectTimeout=10000
# Ignite default is 2000
${moduleId}.core.local.comm.socketWriteTimeout=2000
# Ignite default is 1
${moduleId}.core.local.comm.connectionsPerNode=1
# Ignite default is false, might need to be changed in NATed / Dockerised / Kubernetes environment to avoid connection attempts to unreachable, internal addresses
${moduleId}.core.local.comm.filterReachableAddresses=false

${moduleId}.core.failureDetectionTimeout=10000
${moduleId}.core.systemWorkerBlockedTimeout=\${${moduleId}.core.failureDetectionTimeout}

# default is actually Math.max(8, #available_proc_count)
${moduleId}.core.publicThreadPoolSize=8
# Ignite default is same as public thread pool size
${moduleId}.core.serviceThreadPoolSize=\${${moduleId}.core.publicThreadPoolSize}
# Ignite default is same as public thread pool size
${moduleId}.core.systemThreadPoolSize=\${${moduleId}.core.publicThreadPoolSize}
# despite no intention to use any IgniteAsyncCallback we have to allow pool of 1 thread (default = public thread pool size)
${moduleId}.core.asyncCallbackThreadPoolSize=1
# Ignite default is 4
${moduleId}.core.managementThreadPoolSize=4
# despite p2p being disabled we have to allow pool of 1 thread (default 2)
${moduleId}.core.peerClassLoadingThreadPoolSize=1
# despite not using igfs we have to allow pool of 1 thread (default = #available_proc_count)
${moduleId}.core.igfsThreadPoolSize=1
# Ignite default is same as public thread pool size
${moduleId}.core.dataStreamerThreadPoolSize=\${${moduleId}.core.publicThreadPoolSize}
# Ignite default is same as public thread pool size
${moduleId}.core.utilityCacheThreadPoolSize=\${${moduleId}.core.publicThreadPoolSize}
# despite not using query we have to allow pool of 1 thread (default = public thread pool size)
${moduleId}.core.queryThreadPoolSize=1
# Ignite default is 1
${moduleId}.core.rebalanceThreadPoolSize=1

# 8K page size, 20 - 40 MiB system storage, 1 - 16 GiB default storage
${moduleId}.core.storage.pageSize=8192
${moduleId}.core.storage.systemInitialSize=20971520
${moduleId}.core.storage.systemMaxSize=41943040
${moduleId}.core.storage.defaultStorageRegion.initialSize=1073741824
${moduleId}.core.storage.defaultStorageRegion.maxSize=17179869184
${moduleId}.core.storage.defaultStorageRegion.swapPath=\${java.io.tmpdir}/${moduleId}/defaultDataRegionSwap

${moduleId}.caches.enabled=\${${moduleId}.core.enabled}

${moduleId}.caches.instance.name=\${${moduleId}.core.name}
${moduleId}.caches.partitionsCount=32
${moduleId}.caches.remoteSupport.enabled=false
${moduleId}.caches.ignoreDefaultEvictionConfiguration=true
# Flag was introduced to deal with https://issues.apache.org/jira/browse/IGNITE-11352
# Since this has been dealt with, it only serves to globally disable statistics for potential performance impact
${moduleId}.caches.disableAllStatistics=false

${moduleId}.webSessionCache.enabled=false
${moduleId}.webSessionCache.instanceName=\${${moduleId}.core.name}
${moduleId}.webSessionCache.cacheName=servlet.webSessionCache
${moduleId}.webSessionCache.retriesOnFailure=2
${moduleId}.webSessionCache.retriesTimeout=5000
${moduleId}.webSessionCache.keepBinary=true

${moduleId}.webSessionCache.cacheMode=REPLICATED
${moduleId}.webSessionCache.maxSize=10000

# this configures "our" cache and lock store factories
${moduleId}.caches.cacheFactory._className=${project.basePackage}.cache.CacheFactoryImpl
# for some reason no bean forces Log4j hierarchy to be initialised sooner - so we do
${moduleId}.caches.cacheFactory._dependsOn=log4JHierarchyInit
${moduleId}.caches.cacheFactory.property.instanceName=\${${moduleId}.caches.instance.name}
${moduleId}.caches.cacheFactory.property.partitionsCount=\${${moduleId}.caches.partitionsCount}
${moduleId}.caches.cacheFactory.property.enableRemoteSupport=\${${moduleId}.caches.remoteSupport.enabled}
${moduleId}.caches.cacheFactory.property.ignoreDefaultEvictionConfiguration=\${${moduleId}.caches.ignoreDefaultEvictionConfiguration}
${moduleId}.caches.cacheFactory.property.disableAllStatistics=\${${moduleId}.caches.disableAllStatistics}

${moduleId}.caches.lockStoreFactory._className=${project.basePackage}.lock.LockStoreFactoryImpl
${moduleId}.caches.lockStoreFactory.property.instanceName=\${${moduleId}.caches.instance.name}
${moduleId}.caches.lockStoreFactory.property.partitionsCount=\${${moduleId}.caches.partitionsCount}
${moduleId}.caches.lockStoreFactory.property.enableRemoteSupport=\${${moduleId}.caches.remoteSupport.enabled}
${moduleId}.caches.lockStoreFactory.property.disableAllStatistics=\${${moduleId}.caches.disableAllStatistics}

# tx caches with special value transformations
# TODO Resolve circular dependency in value transformer
#${moduleId}.caches.immutableEntitySharedCache._className=${project.basePackage}.cache.ValueTransformingTransactionalCache
#${moduleId}.caches.immutableEntitySharedCache.property.valueTransformer.ref=${moduleId}-immutableEntityCacheValueTransformer
${moduleId}.caches.node.aspectsCache._className=${project.basePackage}.cache.ValueTransformingTransactionalCache
${moduleId}.caches.node.aspectsCache.property.valueTransformer.ref=${moduleId}-nodeAspectsCacheValueTransformer
${moduleId}.caches.node.propertiesCache._className=${project.basePackage}.cache.ValueTransformingTransactionalCache
${moduleId}.caches.node.propertiesCache.property.valueTransformer.ref=${moduleId}-nodePropertiesCacheValueTransformer

# Custom cache configurations to work with special service initialisation caches
cache.immutableSingletonSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.globalConfigSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.routingContentStoreSharedCache.ignite.cache.type=localDefaultSimple
cache.cachingContentStoreCache.ignite.cache.type=localDefaultSimple


# needs by-reference semantics due to "locked" state (IMHO a design bug which prevents full distribution + perfect synchronicity)
# also can't disable forceInvalidateOnPut as cache interaction design for this cache is bad (TTL, update put without prior read put to be able to detect actual change)
# this cache will cause significant increase in pointless re-read SQL queries in a grid when requests for same node are routed to different grid node every time
# TODO May need an even more special cache implementation for this one to fix Alfresco's issues
cache.node.nodesSharedCache.ignite.cache.type=invalidatingDefaultSimple

# tickets need to be fully replicated to avoid system locking up during joins
# cache usage pattern with getKeys() (not so smart an approach) would call out to other servers on ticket / auth check on each request otherwise
cache.ticketsCache.ignite.cache.type=replicated

# Some optimisations of cache configurations (smaller footprint due to usage patterns not requiring full Ignite caches)
# Will usually only have less than a handful of entries
cache.node.rootNodesSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.node.rootNodesSharedCache.ignite.forceInvalidateOnPut=false
cache.node.allRootNodesSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.node.allRootNodesSharedCache.ignite.forceInvalidateOnPut=false
# avoid stupendous amount of overhead + ping-pong invalidation/reload
cache.immutableEntitySharedCache.ignite.forceInvalidateOnPut=false
# QName contains fields not relevant for serialisation / cache key handling in Ignite B-tree
${moduleId}.core.binary.type.org.alfresco.service.namespace.QName.serializer=Configuration.${moduleId}.core.binary.serializer.configurableRelevantFields
${moduleId}.core.binary.relevantFields.org.alfresco.service.namespace.QName=namespaceURI,localName
# will usually only have as many entries as tenants (typically just one)
# also, forceInvalidation (Alfresco default behaviour) might cause ping-pong invalidation/reload
# lastly, messages / resource bundles may be server-specific due to inclusion of resources from the local classpath, so should not be shared with servers in grid
cache.messagesSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.messagesSharedCache.ignite.forceInvalidateOnPut=false
cache.loadedResourceBundlesSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.loadedResourceBundlesSharedCache.ignite.forceInvalidateOnPut=false
cache.resourceBundleBaseNamesSharedCache.ignite.cache.type=invalidatingDefaultSimple
cache.resourceBundleBaseNamesSharedCache.ignite.forceInvalidateOnPut=false
# will usually have maybe a dozen to a few dozen entries
cache.propertyClassCache.ignite.cache.type=invalidatingDefaultSimple
cache.propertyClassCache.ignite.forceInvalidateOnPut=false
cache.propertyValueCache.ignite.forceInvalidateOnPut=false
# As far as is known this is obsolete since 5.x
cache.webServicesQuerySessionSharedCache.ignite.cache.type=localDefaultSimple
# New cache in 5.2
cache.openCMISRegistrySharedCache.ignite.cache.type=invalidatingDefaultSimple


# compatibility with OOTBee Support Tools
ootbee-support-tools.cache.${project.basePackage}.cache.SimpleIgniteBackedCache.clearable=true
ootbee-support-tools.cache.${project.basePackage}.cache.InvalidatingCacheFacade.clearable=true